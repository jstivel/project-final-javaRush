-- H2-compatible schema based on Liquibase changelog
-- Note: 'bigserial' is replaced with 'BIGINT GENERATED BY DEFAULT AS IDENTITY'
-- Note: UNIQUE constraints are integrated into CREATE TABLE where possible
-- Note: Foreign keys are added at the end after all tables are created

CREATE TABLE USERS
(
  ID           BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  DISPLAY_NAME VARCHAR(32)  NOT NULL UNIQUE,
  EMAIL        VARCHAR(128) NOT NULL UNIQUE,
  FIRST_NAME   VARCHAR(32)  NOT NULL,
  LAST_NAME    VARCHAR(32),
  PASSWORD     VARCHAR(128) NOT NULL,
  ENDPOINT     TIMESTAMP,
  STARTPOINT   TIMESTAMP
);

CREATE TABLE ATTACHMENT
(
  ID          BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  NAME        VARCHAR(128)  NOT NULL,
  FILE_LINK   VARCHAR(2048) NOT NULL,
  OBJECT_ID   BIGINT        NOT NULL,
  OBJECT_TYPE SMALLINT      NOT NULL,
  USER_ID     BIGINT        NOT NULL,
  DATE_TIME   TIMESTAMP
);

CREATE TABLE CONTACT
(
  ID    BIGINT       NOT NULL,
  CODE  VARCHAR(32)  NOT NULL,
  VALUE VARCHAR(256) NOT NULL,
  PRIMARY KEY (ID, CODE)
);

CREATE TABLE MAIL_CASE
(
  ID        BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  EMAIL     VARCHAR(255) NOT NULL,
  NAME      VARCHAR(255) NOT NULL,
  DATE_TIME TIMESTAMP    NOT NULL,
  RESULT    VARCHAR(255) NOT NULL,
  TEMPLATE  VARCHAR(255) NOT NULL
);

CREATE TABLE PROJECT
(
  ID          BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  CODE        VARCHAR(32)   NOT NULL UNIQUE,
  TITLE       VARCHAR(1024) NOT NULL,
  DESCRIPTION VARCHAR(4096) NOT NULL,
  TYPE_CODE   VARCHAR(32)   NOT NULL,
  STARTPOINT  TIMESTAMP,
  ENDPOINT    TIMESTAMP,
  PARENT_ID   BIGINT
);

CREATE TABLE PROFILE
(
  ID                 BIGINT PRIMARY KEY,
  LAST_LOGIN         TIMESTAMP,
  LAST_FAILED_LOGIN  TIMESTAMP,
  MAIL_NOTIFICATIONS BIGINT
);

CREATE TABLE REFERENCE
(
  ID         BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  CODE       VARCHAR(32)   NOT NULL,
  REF_TYPE   SMALLINT      NOT NULL,
  ENDPOINT   TIMESTAMP,
  STARTPOINT TIMESTAMP,
  TITLE      VARCHAR(1024) NOT NULL,
  AUX        VARCHAR,
  UNIQUE (REF_TYPE, CODE)
);

CREATE TABLE SPRINT
(
  ID          BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  STATUS_CODE VARCHAR(32)   NOT NULL,
  STARTPOINT  TIMESTAMP,
  ENDPOINT    TIMESTAMP,
  PROJECT_ID  BIGINT        NOT NULL,
  CODE        VARCHAR(32)   NOT NULL,
  UNIQUE (PROJECT_ID, CODE)
);

CREATE TABLE TASK
(
  ID          BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  TITLE       VARCHAR(1024) NOT NULL,
  TYPE_CODE   VARCHAR(32)   NOT NULL,
  STATUS_CODE VARCHAR(32)   NOT NULL,
  PROJECT_ID  BIGINT        NOT NULL,
  SPRINT_ID   BIGINT,
  PARENT_ID   BIGINT,
  STARTPOINT  TIMESTAMP,
  ENDPOINT    TIMESTAMP
);

CREATE TABLE ACTIVITY
(
  ID          BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  AUTHOR_ID     BIGINT NOT NULL,
  TASK_ID       BIGINT NOT NULL,
  UPDATED       TIMESTAMP,
  COMMENT       VARCHAR(4096),
  TITLE         VARCHAR(1024),
  DESCRIPTION   VARCHAR(4096),
  ESTIMATE      INTEGER,
  TYPE_CODE     VARCHAR(32),
  STATUS_CODE   VARCHAR(32),
  PRIORITY_CODE VARCHAR(32)
);

CREATE TABLE TASK_TAG
(
  TASK_ID BIGINT      NOT NULL,
  TAG     VARCHAR(32) NOT NULL,
  UNIQUE (TASK_ID, TAG)
);

CREATE TABLE USER_BELONG
(
  ID             BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  OBJECT_ID      BIGINT      NOT NULL,
  OBJECT_TYPE    SMALLINT    NOT NULL,
  USER_ID        BIGINT      NOT NULL,
  USER_TYPE_CODE VARCHAR(32) NOT NULL,
  STARTPOINT     TIMESTAMP,
  ENDPOINT       TIMESTAMP
);

CREATE TABLE USER_ROLE
(
  USER_ID BIGINT   NOT NULL,
  ROLE    SMALLINT NOT NULL,
  UNIQUE (USER_ID, ROLE)
);

---
--
--  **Foreign Keys**
--
-- These are separated to avoid errors during initial table creation.
--
--                                                    ```sql
ALTER TABLE PROJECT
  ADD CONSTRAINT FK_PROJECT_PARENT FOREIGN KEY (PARENT_ID) REFERENCES PROJECT (ID) ON DELETE CASCADE;

ALTER TABLE SPRINT
  ADD CONSTRAINT FK_SPRINT_PROJECT FOREIGN KEY (PROJECT_ID) REFERENCES PROJECT (ID) ON DELETE CASCADE;

ALTER TABLE PROFILE
  ADD CONSTRAINT FK_PROFILE_USERS FOREIGN KEY (ID) REFERENCES USERS (ID) ON DELETE CASCADE;

ALTER TABLE CONTACT
  ADD CONSTRAINT FK_CONTACT_PROFILE FOREIGN KEY (ID) REFERENCES PROFILE (ID) ON DELETE CASCADE;

ALTER TABLE TASK
  ADD CONSTRAINT FK_TASK_PROJECT FOREIGN KEY (PROJECT_ID) REFERENCES PROJECT (ID) ON DELETE CASCADE;

ALTER TABLE TASK
  ADD CONSTRAINT FK_TASK_SPRINT FOREIGN KEY (SPRINT_ID) REFERENCES SPRINT (ID) ON DELETE SET NULL;

ALTER TABLE TASK
  ADD CONSTRAINT FK_TASK_PARENT_TASK FOREIGN KEY (PARENT_ID) REFERENCES TASK (ID) ON DELETE CASCADE;

ALTER TABLE ACTIVITY
  ADD CONSTRAINT FK_ACTIVITY_USERS FOREIGN KEY (AUTHOR_ID) REFERENCES USERS (ID) ON DELETE CASCADE;

ALTER TABLE ACTIVITY
  ADD CONSTRAINT FK_ACTIVITY_TASK FOREIGN KEY (TASK_ID) REFERENCES TASK (ID) ON DELETE CASCADE;

ALTER TABLE TASK_TAG
  ADD CONSTRAINT FK_TASK_TAG FOREIGN KEY (TASK_ID) REFERENCES TASK (ID) ON DELETE CASCADE;

ALTER TABLE USER_BELONG
  ADD CONSTRAINT FK_USER_BELONG FOREIGN KEY (USER_ID) REFERENCES USERS (ID) ON DELETE CASCADE;

ALTER TABLE ATTACHMENT
  ADD CONSTRAINT FK_ATTACHMENT FOREIGN KEY (USER_ID) REFERENCES USERS (ID) ON DELETE CASCADE;

ALTER TABLE USER_ROLE
  ADD CONSTRAINT FK_USER_ROLE FOREIGN KEY (USER_ID) REFERENCES USERS (ID) ON DELETE CASCADE;
